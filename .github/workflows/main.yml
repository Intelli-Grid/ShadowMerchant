name: Daily Content Automation

on:
  schedule:
    - cron: "0 12 * * *" # Daily at 12 PM UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  run-bot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Scrape products
        run: |
          cd scripts
          python scraper.py

      - name: Generate content
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          GROQ_API_BASE: ${{ secrets.GROQ_API_BASE }}
          AMAZON_AFFILIATE_ID: ${{ secrets.AMAZON_AFFILIATE_ID }}
        run: |
          cd scripts
          python generator.py --max-posts 2 --content-length medium

      - name: Validate and optimize content
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          GROQ_API_BASE: ${{ secrets.GROQ_API_BASE }}
          SITE_NAME: ${{ secrets.SITE_NAME }}
          SITE_URL: ${{ secrets.SITE_URL }}
          SITE_LOGO: ${{ secrets.SITE_LOGO }}
          SITE_AUTHOR: ${{ secrets.SITE_AUTHOR }}
        run: |
          cd scripts
          python validator.py
          python seo.py

      - name: Publish content
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USERNAME: ${{ secrets.WP_USERNAME }}
          WP_PASSWORD: ${{ secrets.WP_PASSWORD }}
        run: |
          cd scripts
          python publisher.py --platform wordpress --debug

      - name: Generate newsletter
        env:
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        run: |
          cd scripts
          python newsletter.py

      - name: Update dashboard
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Check if there are any changes to commit
          if [[ -n "$(git status --porcelain docs/data/ docs/posts/ docs/validation.html 2>/dev/null)" ]]; then
            git add docs/data/ docs/posts/ docs/validation.html || true
            git commit -m "Update products, posts, and analytics"
            git push
          else
            echo "No changes to commit"
          fi
